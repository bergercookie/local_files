function updateFiles(manip)
%UPDATEFILES updates (or creates) files from a manipulator object
%    syntax: manip.updateFiles
%
%  This method is normally called after loading a manipulator object from a
%  file, but you can use it every time you want to create or update all the
%  files needed and automatically generated by a manipulator object.
%
%     See also manipulator
%              manipulator/manipload
%
% Copyright (C) 2009, by Carmine Dario Bellicoso and Marco Caputano.
% This file is part of GNU LGPLv2.1 DAMA^{ROB}
%    http://www.damarob.altervista.org
%

%     DAMA^{ROB}: a symbolic robotics toolbox for matlab(tm)
%     Copyright (C) 2009, by Carmine Dario Bellicoso and Marco Caputano.
%       http://www.damarob.altervista.org
%       damarobotics@gmail.com
% 
%     This library is free software; you can redistribute it and/or
%     modify it under the terms of the GNU Lesser General Public
%     License as published by the Free Software Foundation; either
%     version 2.1 of the License, or (at your option) any later version.
% 
%     This library is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%     Lesser General Public License for more details.
% 
%     You should have received a copy of the GNU Lesser General Public
%     License along with this library; if not, write to the Free Software
%     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

if manip.DH.r==0 && isfield(manip.DH,'table')
    disp(' a manipulator without joints has no associated files');
    return    
end
try
    manip.show_manip
catch
    if (manip.is_sym == 0)&& ~strcmp(manip.name,'tmp')
        [fx fy fz] = ee_postn(manip);
        manip.func.x = fx;
        manip.func.y = fy;
        manip.func.z = fz;
        [manip.fig.vr, manip.vr_base] = createVR(manip);
        manip.jointpos= zeros(1,manip.DH.r);
    end
end     %end try

% FILES
if (manip.evaluated.Direct_Kinematics == 1) && ( (manip.is_sym == 0) && ~strcmp(manip.name,'tmp') )
    name = manip.name;
    
    qdd = manip.jointvar.qdd;
    qd = manip.jointvar.qd;
    q = manip.jointvar.q;
    
    sym_mat2func(manip.kin.J.Jd , qd, q , [name,'_Jd_qd'],10);

    syms h1 h2 h3 h4 h5 h6;
    sym_mat2func(manip.kin.J.J.' , [h1 h2 h3 h4 h5 h6] , q , [name,'_Jt_he'],10);

    sym_mat2func(manip.kin.J.J , qdd , q , [name,'_J_qdd'],10);

    syms u1 u2 u3 u4 u5 u6;    
    sym_mat2func(manip.kin.nsap , [], q , [name,'_nsap'],10);
end

if (manip.evaluated.Direct_Dynamics == 1) && ( (manip.is_sym == 0) && ~strcmp(manip.name,'tmp') )
    % generate functions for simulation
    sym_mat2func(manip.dyn.B(:) , [], manip.jointvar.q ,...
        [manip.name,'_B_matrix'],30);

    sym_mat2func(manip.dyn.B , manip.jointvar.qdd, manip.jointvar.q ,...
        [manip.name,'_B_qdd'],30);

    sym_mat2func(manip.dyn.C , manip.jointvar.qd, ...
        [manip.jointvar.q manip.jointvar.qd] ,[manip.name,'_C_qd'],30);
    sym_mat2func(manip.dyn.g, [] , [manip.jointvar.q] ,[manip.name,'_g'],30);
end

end     %end function
