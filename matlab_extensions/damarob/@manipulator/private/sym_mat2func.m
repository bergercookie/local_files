function sym_mat2func(A, b, params, fname, dig)
% SYM_MAT2FUNC Generates an m-file containing the function that evaluates 
% the product A*b.
%    syntax: sym_mat2func(A, b, params, fname, digits)
%
% where:
%   A is a symbolic matrix
%   params is a symbolic vector of parameters of A or b
%   b is a symbolic vector
%   fname is string containing the name of the function.
%       The name of created file will be 'fname'.m
%       The function will be: 'fname'(b,params)
%   digits determines the accuracy of Maple's numeric computations
%       for more information about digts
%       See also sym/digits
%
% note: if A is a vector and b is a null vector, the function generated
%       will be 'fname'(params) = A
%
% Copyright (C) 2009, by Carmine Dario Bellicoso and Marco Caputano.
% This file is part of GNU LGPLv2.1 DAMA^{ROB}
%    http://www.damarob.altervista.org
%

%     DAMA^{ROB}: a symbolic robotics toolbox for matlab(tm)
%     Copyright (C) 2009, by Carmine Dario Bellicoso and Marco Caputano.
%       http://www.damarob.altervista.org
%       damarobotics@gmail.com
% 
%     This library is free software; you can redistribute it and/or
%     modify it under the terms of the GNU Lesser General Public
%     License as published by the Free Software Foundation; either
%     version 2.1 of the License, or (at your option) any later version.
% 
%     This library is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%     Lesser General Public License for more details.
% 
%     You should have received a copy of the GNU Lesser General Public
%     License along with this library; if not, write to the Free Software
%     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

dig_bak = digits;
digits(dig);

if verLessThan('matlab', '7.7')
    endC = 5;
else
    endC = 3;
end

if size(b) * [1;0] < size(b) * [0;1]
    b = b.';
end

if size(params) * [1;0] < size(params) * [0;1]
    params = params.';
end


dim_b = length(b);                  % how many elements in b (variables)
dim_par = length(params);           % how many parameters

b_char = evalc('b.''');                % b char
b_char = b_char(11:end-endC);
params_char = evalc('params.''');           % params.' char
params_char = params_char(11:end-endC);

if dim_b ~= 0                               % if b is a vector
    A_b_T = (A*b).';                          % A*b in a row
else                                        % b is empty
    if size(A) * [1;0] > size(A) * [0;1]
        A = A.';                                % A in a row
    end
    A_b_T = A;
end
A_b_T = simplify( A_b_T );              %#ok<NASGU>
% A_b_T = evalc('vpa(A_b_T)');          % A*b.' char                                   OLD ROW
A_b_T = evalc('(A_b_T)');               % A*b.' char  
A_b_T = A_b_T(13:end-endC);              % suppress the row 'ans =' and void


NL = [char(13),char(10)]; % 'new line' string

file_fun = fopen([fname,'.m'], 'w');

if dim_b ~= 0                               % if b is a vector
    fwrite(file_fun, ['function result=', fname,'(b,params) ',NL ]);
else
    fwrite(file_fun, ['function result=', fname,'(params) ',NL ]);
end
fwrite(file_fun, ['% This code has been automatically generated by sym_mat2func ', NL]);
fwrite(file_fun, ['% ', NL]);

if dim_b ~= 0                               % if b is a vector
    fwrite(file_fun, ['%    function: ',fname ,'(b,params)' , NL]);
else
    fwrite(file_fun, ['%    function: ',fname ,'(params)' , NL]);
end
fwrite(file_fun, ['% ', NL]);
fwrite(file_fun, ['%       variables b: ',b_char, NL]);
fwrite(file_fun, ['%       parameters params:',params_char, NL]);
fwrite(file_fun, '%'); fwrite(file_fun, NL);
fwrite(file_fun, '% Copyright (C) 2009, by Carmine Dario Bellicoso and Marco Caputano.'); fwrite(file_fun, NL);
fwrite(file_fun, '% This file is part of GNU LGPLv2.1 DAMA^{ROB}'); fwrite(file_fun, NL);
fwrite(file_fun, '%    http://www.damarob.altervista.org'); fwrite(file_fun, NL);
fwrite(file_fun, NL);


fwrite(file_fun, ['%    variables :', NL]);
for i=1:1:dim_b
    i_st = num2str(i);
    b_c_i = evalc(['b(' i_st ')']);    % string with the name of the variable
    b_c_i = b_c_i(11:end-endC);
    row_assign = [b_c_i, ' = b(', i_st ,'); '];   %code to be written

    fwrite(file_fun, [row_assign, NL]);               % WRITE assignment code
end

fwrite(file_fun, ['%    parameters :', NL]);
for i=1:1:dim_par
    i_st = num2str(i);
    par_i = evalc(['params(' i_st ')']);%string with the name of the variable
    par_i = par_i(11:end-endC);
    row_assign = [par_i, ' = params(', i_st ,'); '];   %code to be written

    fwrite(file_fun, [row_assign, NL]);               % WRITE assignment code
end


fwrite(file_fun, ['% evaluates result:',NL]);
fwrite(file_fun, ['result = ' A_b_T ,';', NL]);
fwrite(file_fun, ['result = result.''; ', NL]);
fwrite(file_fun, 'return');

fclose(file_fun);

digits(dig_bak);
